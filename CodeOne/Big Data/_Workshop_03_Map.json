{"paragraphs":[{"text":"%md\n\n# Angular\n\nIt is also possible to use angular, a TypeScript-based open-source web application framework.\n\nIt can be utilized to build interactive maps, which can be part of your data engineering or analytics.","dateUpdated":"2019-09-17T19:54:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":"true"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Angular</h1>\n<p>It is also possible to use angular, a TypeScript-based open-source web application framework.</p>\n<p>It can be utilized to build interactive maps, which can be part of your data engineering or analytics.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1568750059242_1306127239","id":"20190911-081354_1839279775","dateCreated":"2019-09-17T19:54:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1279"},{"text":"%md\n# Our First Map - Top 10 Pickup Stations\n\nTo get started, we will plot the 10 top pickup stations on a map.  We will have 1 paragraph which will use Spark and Spark SQL to query our bike_trips table and save the results into an angular variable.  And we will have 1 paragraph that contains the html/javascript to display our map. \n\n<span style=\"color:red\">Run the \"Spark code for our first map\" to gather the data for our map</span>\n","user":"anonymous","dateUpdated":"2019-09-17T19:56:26+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":"true"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Our First Map - Top 10 Pickup Stations</h1>\n<p>To get started, we will plot the 10 top pickup stations on a map. We will have 1 paragraph which will use Spark and Spark SQL to query our bike_trips table and save the results into an angular variable. And we will have 1 paragraph that contains the html/javascript to display our map. </p>\n<span style=\"color:red\">Run the \"Spark code for our first map\" to gather the data for our map</span>\n</div>"}]},"apps":[],"jobName":"paragraph_1568750059243_1305742490","id":"20190826-130943_1943708905","dateCreated":"2019-09-17T19:54:19+0000","dateStarted":"2019-09-17T19:56:26+0000","dateFinished":"2019-09-17T19:56:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1280"},{"text":"%md\n\n\n<span style=\"color:red\">Then run the \"HTML/Javascript for our first map\" to display the map with the selected data</span>","user":"anonymous","dateUpdated":"2019-09-17T19:56:28+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":"true"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<span style=\"color:red\">Then run the \"HTML/Javascript for our first map\" to display the map with the selected data</span>\n</div>"}]},"apps":[],"jobName":"paragraph_1568750059243_1305742490","id":"20190911-090714_1609704186","dateCreated":"2019-09-17T19:54:19+0000","dateStarted":"2019-09-17T19:56:28+0000","dateFinished":"2019-09-17T19:56:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1281"},{"text":"%spark\n\n\nval Container = \"xyzasdf\"\nval Directory = \"citibike\"\n\nvar xyzasdf_df: org.apache.spark.sql.DataFrame = null\n\nprintln(\"Running on OCI\");\nxyzasdf_df = spark.read.format(\"com.databricks.spark.csv\").option(\"header\", \"true\").load(\"oci://xyzasdf@sehubpilot/\"+Directory+\"/raw/xyzasdf_201612-citibike-tripdata.csv\")\n\n\nxyzasdf_df.createOrReplaceTempView(\"xyzasdf_bike_trips_temp\")\n\n//Define a class for the structure of the data we will be passing to the map javascript code\ncase class xyzasdf_Stations(ridetype: String, station: String, trips: String, lat: Double, lon: Double)\n\n//Unbind angular variable in case it already exists from previous run\nz.angularUnbind(\"xyzasdf_topstations\") \n\n//Define a new dataframe based off a query\nval xyzasdf_topstationsDF =spark.sql(s\"\"\"select \"Start\" ridetype, `Start Station Name` station,`Start Station Latitude` lat,`Start Station Longitude` lon, count(*) trips from xyzasdf_bike_trips_temp \ngroup by `Start Station Name`,`Start Station Latitude`,`Start Station Longitude`\norder by count(*) desc limit 10\"\"\")\n\n\n//Map the DF into an Array of Stations\nvar xyzasdf_items = xyzasdf_topstationsDF.map(b => xyzasdf_Stations(b(0).toString, b(1).toString, \"Pickups:\"+b(4).toString, b(2).toString.toDouble, b(3).toString.toDouble)).collect\n\n//Bind the TopStations (as an Array) to an Angular variable named topstations\nz.angularBind(\"xyzasdf_topstations\", xyzasdf_items) \n\nprintln(\"..\")\nprintln(\"done\")","user":"anonymous","dateUpdated":"2019-09-17T19:56:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nContainer: String = xyzasdf\n\nDirectory: String = citibike\n\nxyzasdf_df: org.apache.spark.sql.DataFrame = null\nRunning on OCI\n\nxyzasdf_df: org.apache.spark.sql.DataFrame = [Trip Duration: string, Start Time: string ... 13 more fields]\n\ndefined class xyzasdf_Stations\n\nxyzasdf_topstationsDF: org.apache.spark.sql.DataFrame = [ridetype: string, station: string ... 3 more fields]\nxyzasdf_items: Array[xyzasdf_Stations] = Array(xyzasdf_Stations(Start,Pershing Square North,Pickups:9642,40.751873,-73.977706), xyzasdf_Stations(Start,W 21 St & 6 Ave,Pickups:5990,40.74173969,-73.99415556), xyzasdf_Stations(Start,E 17 St & Broadway,Pickups:5802,40.73704984,-73.99009296), xyzasdf_Stations(Start,Broadway & E 22 St,Pickups:5420,40.7403432,-73.98955109), xyzasdf_Stations(Start,Broadway & E 14 St,Pickups:5342,40.73454567,-73.99074142), xyzasdf_Stations(Start,8 Ave & W 33 St,Pickups:5282,40.751551,-73.993934), xyzasdf_Stations(Start,W 41 St & 8 Ave,Pickups:4963,40.75640548,-73.9900262), xyzasdf_Stations(Start,W 52 St & 5 Ave,Pickups:4822,40.75992262,-73.97648516), xyzasdf_Stations(Start,Cooper Square & E 7 St,Pickups:4644,40.72923649910006,-73.99086803197861), xyzasdf_Station.....\ndone\n"}]},"apps":[],"jobName":"paragraph_1568750059244_1303818746","id":"20190826-131307_2026087472","dateCreated":"2019-09-17T19:54:19+0000","dateStarted":"2019-09-17T19:56:49+0000","dateFinished":"2019-09-17T19:57:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1282"},{"text":"%md\n\nAbove we query the data from the Object Storage by using Scala and the OCI HDFS Connector. \n\nWe map the Start and Endstations with the corresponding Geo data to the dataframe `topstationsDF` and bind it to angular.\n\nExecute the cell below to display the map. \n","user":"anonymous","dateUpdated":"2019-09-17T19:57:22+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":"true"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Above we query the data from the Object Storage by using Scala and the OCI HDFS Connector. </p>\n<p>We map the Start and Endstations with the corresponding Geo data to the dataframe <code>topstationsDF</code> and bind it to angular.</p>\n<p>Execute the cell below to display the map.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1568750059244_1303818746","id":"20190909-121927_612975550","dateCreated":"2019-09-17T19:54:19+0000","dateStarted":"2019-09-17T19:57:22+0000","dateFinished":"2019-09-17T19:57:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1283"},{"text":"%angular\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.3/leaflet.css\" />\n<div id=\"firstmap\" style=\"height: 600px; width: 100%\"></div>\n\n<script type=\"text/javascript\">\n\n//based on https://gist.github.com/granturing/a09aed4a302a7367be92, https://community.hortonworks.com/articles/90320/add-leaflet-map-to-zeppelin-notebook.html, etc\n\nfunction initMap() {\n    //open up a map around NYC at zoom level 13\n    var map = L.map('firstmap', {preferCanvas: true}).setView([40.75, -73.99], 13);\n\n    //define the background tile layer using OpenStreet maps.  Leaflet can work with other providers, too\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n        maxZoom: 16,\n        minZoom: 11\n    }).addTo(map);\n\n    var geoMarkers = L.layerGroup().addTo(map);\n    \n    // setup a custom icon for markers. See https://github.com/pointhi/leaflet-color-markers\n    var greenIcon = new L.Icon({\n      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n      iconSize: [12, 20],\n      iconAnchor: [6, 20],\n      popupAnchor: [1, -17],\n      shadowSize: [20, 20]\n    });\n    \n    var redIcon = new L.Icon({\n      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n      iconSize: [12, 20],\n      iconAnchor: [6, 20],\n      popupAnchor: [1, -17],\n      shadowSize: [20, 20]\n    });\n\n    var el = angular.element($('#firstmap').parent('.ng-scope'));\n    angular.element(el).ready(function() {\n        \n        //listen for changes to the angular variable called stations\n        window.locationWatcher = el.scope().compiledScope.$watch('xyzasdf_topstations', function(newValue, oldValue) {\n\n            //loop through each entry in our stations variable and add it as a marker\n            angular.forEach(newValue, function(station) {\n                var marker = L.marker([station.lat, station.lon])\n                marker.addTo(geoMarkers);  \n\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we'll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log('Loading Leaflet library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.3/leaflet.js';\n    sc.onload = initMap;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>\n","user":"anonymous","dateUpdated":"2019-09-17T19:57:25+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":"true"},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.3/leaflet.css\" />\n<div id=\"firstmap\" style=\"height: 600px; width: 100%\"></div>\n\n<script type=\"text/javascript\">\n\n//based on https://gist.github.com/granturing/a09aed4a302a7367be92, https://community.hortonworks.com/articles/90320/add-leaflet-map-to-zeppelin-notebook.html, etc\n\nfunction initMap() {\n    //open up a map around NYC at zoom level 13\n    var map = L.map('firstmap', {preferCanvas: true}).setView([40.75, -73.99], 13);\n\n    //define the background tile layer using OpenStreet maps.  Leaflet can work with other providers, too\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n        maxZoom: 16,\n        minZoom: 11\n    }).addTo(map);\n\n    var geoMarkers = L.layerGroup().addTo(map);\n    \n    // setup a custom icon for markers. See https://github.com/pointhi/leaflet-color-markers\n    var greenIcon = new L.Icon({\n      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n      iconSize: [12, 20],\n      iconAnchor: [6, 20],\n      popupAnchor: [1, -17],\n      shadowSize: [20, 20]\n    });\n    \n    var redIcon = new L.Icon({\n      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n      iconSize: [12, 20],\n      iconAnchor: [6, 20],\n      popupAnchor: [1, -17],\n      shadowSize: [20, 20]\n    });\n\n    var el = angular.element($('#firstmap').parent('.ng-scope'));\n    angular.element(el).ready(function() {\n        \n        //listen for changes to the angular variable called stations\n        window.locationWatcher = el.scope().compiledScope.$watch('xyzasdf_topstations', function(newValue, oldValue) {\n\n            //loop through each entry in our stations variable and add it as a marker\n            angular.forEach(newValue, function(station) {\n                var marker = L.marker([station.lat, station.lon])\n                marker.addTo(geoMarkers);  \n\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we'll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log('Loading Leaflet library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.3/leaflet.js';\n    sc.onload = initMap;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>"}]},"apps":[],"jobName":"paragraph_1568750059244_1303818746","id":"20190826-131327_1398279067","dateCreated":"2019-09-17T19:54:19+0000","dateStarted":"2019-09-17T19:57:24+0000","dateFinished":"2019-09-17T19:57:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1284"},{"text":"%md\n# A more complex example - Top Pickup and Dropoff locations for certain times of day\n\nNow that we have shown a simple example of a map, we will show a more complex example using a parameter-driven query with multiple map markers and layers.\n\nTo run this example:\n\n- Use the Query Parameters paragraph to choose the time frame for the query as well as how many of the Top pickup and dropoff stations to show on the map.\n- Then run the Query Parameters paragraph.  This will query the desired data (by automatically running the \"Spark code for the more complex map\" paragraph)\n- Once the data has been queried (takes about 20 seconds), the \"More Complex Map\" will be updated.  If the map is not showing, then play the \"More Complex Map\" paragraph to make it visible.\n-- Pickups are drawn in green.  Dropoffs are in red.\n-- Use the layers control in the upper right of the map to show/hide pickup and dropoff stations.\n-- The size of the circle on the map represents the number of pickups/dropoffs for that station during the selected time frame.","dateUpdated":"2019-09-17T19:54:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":"true"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>A more complex example - Top Pickup and Dropoff locations for certain times of day</h1>\n<p>Now that we have shown a simple example of a map, we will show a more complex example using a parameter-driven query with multiple map markers and layers.</p>\n<p>To run this example:</p>\n<ul>\n  <li>Use the Query Parameters paragraph to choose the time frame for the query as well as how many of the Top pickup and dropoff stations to show on the map.</li>\n  <li>Then run the Query Parameters paragraph. This will query the desired data (by automatically running the &ldquo;Spark code for the more complex map&rdquo; paragraph)</li>\n  <li>Once the data has been queried (takes about 20 seconds), the &ldquo;More Complex Map&rdquo; will be updated. If the map is not showing, then play the &ldquo;More Complex Map&rdquo; paragraph to make it visible.<br/>&ndash; Pickups are drawn in green. Dropoffs are in red.<br/>&ndash; Use the layers control in the upper right of the map to show/hide pickup and dropoff stations.<br/>&ndash; The size of the circle on the map represents the number of pickups/dropoffs for that station during the selected time frame.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1568750059245_1303433997","id":"20190826-134347_225739648","dateCreated":"2019-09-17T19:54:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1285"},{"text":"%md\n\nThis cell gives us the capability to update the map after new settings have been chosen. If you look at the code, we are using `z.run`and the cell ID to automatically run the cell after. The cell ID can be found via the settings button/gear wheel. \n\n<span style=\"color:red\">Choose the desired settings and press run to update the map below.</span>\n","user":"anonymous","dateUpdated":"2019-09-17T19:59:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>This cell gives us the capability to update the map after new settings have been chosen. If you look at the code, we are using <code>z.run</code>and the cell ID to automatically run the cell after. The cell ID can be found via the settings button/gear wheel. </p>\n<span style=\"color:red\">Choose the desired settings and press run to update the map below.</span>\n</div>"}]},"apps":[],"jobName":"paragraph_1568750255540_112695803","id":"20190917-195735_1670236968","dateCreated":"2019-09-17T19:57:35+0000","dateStarted":"2019-09-17T19:59:21+0000","dateFinished":"2019-09-17T19:59:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1286"},{"text":"%spark\nz.angularBind(\"BIND_topN\", z.select(\"Top N\",\"10\",Seq((\"5\",\"5\"),(\"10\",\"10\"),(\"20\",\"20\"),(\"50\",\"50\"),(\"100\",\"100\"))))\nz.angularBind(\"BIND_dayOfWeek\", z.select(\"dayOfWeek\", \"All\", Seq((\"All\", \"All\"),\n                         (\"MonFri\", \"Mon-Fri\"), (\"SatSun\",\"Weekend\")))  )\nz.angularBind(\"BIND_hourOfDay\", z.select(\"hourOfDay\", \"All\", Seq((\"All\", \"All\"),\n                         (\"Morning\", \"7am to 10am\"), (\"Midday\",\"11am to 3pm\"),(\"Afternoon\",\"4pm to 7pm\"),\n                         (\"Evening\",\"8pm to 11pm\"),(\"LateNite\",\"12am to 6am\")))  )\n                         \nz.run(\"20190826-134402_1561120541\")                      \n\t\t\t\t\t\t ","user":"anonymous","dateUpdated":"2019-09-17T20:02:05+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{"hourOfDay":"Afternoon","Top N":"5","dayOfWeek":"MonFri"},"forms":{"Top N":{"name":"Top N","displayName":"Top N","type":"select","defaultValue":"10","options":[{"value":"5","displayName":"5","$$hashKey":"object:2371"},{"value":"10","displayName":"10","$$hashKey":"object:2372"},{"value":"20","displayName":"20","$$hashKey":"object:2373"},{"value":"50","displayName":"50","$$hashKey":"object:2374"},{"value":"100","displayName":"100","$$hashKey":"object:2375"}],"hidden":false,"$$hashKey":"object:2346"},"dayOfWeek":{"name":"dayOfWeek","displayName":"dayOfWeek","type":"select","defaultValue":"All","options":[{"value":"All","displayName":"All","$$hashKey":"object:2356"},{"value":"MonFri","displayName":"Mon-Fri","$$hashKey":"object:2357"},{"value":"SatSun","displayName":"Weekend","$$hashKey":"object:2358"}],"hidden":false,"$$hashKey":"object:2344"},"hourOfDay":{"name":"hourOfDay","displayName":"hourOfDay","type":"select","defaultValue":"All","options":[{"value":"All","displayName":"All","$$hashKey":"object:2362"},{"value":"Morning","displayName":"7am to 10am","$$hashKey":"object:2363"},{"value":"Midday","displayName":"11am to 3pm","$$hashKey":"object:2364"},{"value":"Afternoon","displayName":"4pm to 7pm","$$hashKey":"object:2365"},{"value":"Evening","displayName":"8pm to 11pm","$$hashKey":"object:2366"},{"value":"LateNite","displayName":"12am to 6am","$$hashKey":"object:2367"}],"hidden":false,"$$hashKey":"object:2345"}}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1568750059246_1304588243","id":"20190826-134350_2038496199","dateCreated":"2019-09-17T19:54:19+0000","dateStarted":"2019-09-17T20:02:06+0000","dateFinished":"2019-09-17T20:02:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1287"},{"text":"%spark\n\n//Define a class for the structure of the data we will be passing to the map javascript code\ncase class xyzasdf_Stations(ridetype: String, station: String, trips: String, lat: Double, lon: Double, radius: Double)\n\nz.angularUnbind(\"xyzasdf_stations\")\n\n{\n//Be sure to have run Part 1 prior to running this as this assumes that the bike_trips table is part of your current session\n\n//Define some UI widgets for data selection parameters\n// Learn more here: https://zeppelin.apache.org/docs/0.6.1/interpreter/spark.html#form-creation\n\n\n//Use our UI values to define custom SQL\nvar limitString = \" limit \"+z.angular(\"BIND_topN\")\nvar whereString = \" where 1=1 \"\n\nif (z.angular(\"BIND_dayOfWeek\")==\"MonFri\") {\n    whereString = whereString+ s\"\"\" AND date_format(`Start Time`,\"E\") in (\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\") \"\"\"\n} else if (z.angular(\"BIND_dayOfWeek\")==\"SatSun\") {\n    whereString = whereString+ s\"\"\" AND date_format(`Start Time`,\"E\") in (\"Sat\",\"Sun\") \"\"\"\n}\n\nif (z.angular(\"BIND_hourOfDay\")==\"Morning\") {\n    whereString = whereString+ s\"\"\" AND date_format(`Start Time`,\"H\") in (\"7\",\"8\",\"9\",\"10\") \"\"\"\n} else if (z.angular(\"BIND_hourOfDay\")==\"Midday\") {\n    whereString = whereString+ s\"\"\" AND date_format(`Start Time`,\"H\") in (\"11\",\"12\",\"13\",\"14\",\"15\") \"\"\"\n} else if (z.angular(\"BIND_hourOfDay\")==\"Afternoon\") {\n    whereString = whereString+ s\"\"\" AND date_format(`Start Time`,\"H\") in (\"16\",\"17\",\"18\",\"19\") \"\"\"\n} else if (z.angular(\"BIND_hourOfDay\")==\"Evening\") {\n    whereString = whereString+ s\"\"\" AND date_format(`Start Time`,\"H\") in (\"20\",\"21\",\"22\",\"23\") \"\"\"\n} else if (z.angular(\"BIND_hourOfDay\")==\"LateNite\") {\n    whereString = whereString+ s\"\"\" AND date_format(`Start Time`,\"H\") in (\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\") \"\"\"\n}\n\nprintln(\"WHERE STRING: \"+whereString)\n\n//Define a new dataframe based off a query\nvar xyzasdf_stations = spark.sql(s\"\"\"select \"Start\" ridetype, `Start Station Name` station,`Start Station Latitude` lat,`Start Station Longitude` lon, count(*) trips from xyzasdf_bike_trips_temp \"\"\" +\nwhereString + s\"\"\"\ngroup by `Start Station Name`,`Start Station Latitude`,`Start Station Longitude`\norder by count(*) desc \"\"\" + limitString)\n\n\n//Map the DF into an Array of Stations\nvar xyzasdf_items1 = xyzasdf_stations.map(b => xyzasdf_Stations(b(0).toString, b(1).toString, \"Pickups:\"+b(4).toString, b(2).toString.toDouble, b(3).toString.toDouble,  b(4).toString.toDouble/8 )).collect\n\n\n\n//now do the same for top ending stations\nxyzasdf_stations = spark.sql(s\"\"\"select \"End\" ridetype, `End Station Name` station,`End Station Latitude` lat,`End Station Longitude` lon, count(*) trips from xyzasdf_bike_trips_temp \"\"\" +\nwhereString + s\"\"\"\ngroup by `End Station Name`,`End Station Latitude`,`End Station Longitude`\norder by count(*) desc \"\"\" + limitString)\n\t\n//Map the DF into an Array of Stations.  Offset the lat,lon by a bit so you see both Start and End markers\nvar xyzasdf_items2 = xyzasdf_stations.map(b => xyzasdf_Stations(b(0).toString, b(1).toString, \"Dropoffs:\"+b(4).toString, b(2).toString.toDouble+0.0001, b(3).toString.toDouble+0.0001, b(4).toString.toDouble/8)).collect\n\n//combine the two arrays\nval xyzasdf_combined=xyzasdf_items1 ++ xyzasdf_items2\n\n//Bind the Stations to an Angular variable named stations\nz.angularBind(\"xyzasdf_stations\", xyzasdf_combined) \n\nprintln(\"done\")\n}\n","user":"anonymous","dateUpdated":"2019-09-17T20:01:53+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":"true","language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndefined class xyzasdf_Stations\nWHERE STRING:  where 1=1  AND date_format(`Start Time`,\"E\") in (\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\")  AND date_format(`Start Time`,\"H\") in (\"16\",\"17\",\"18\",\"19\") \ndone\n"}]},"apps":[],"jobName":"paragraph_1568750059247_1304203494","id":"20190826-134402_1561120541","dateCreated":"2019-09-17T19:54:19+0000","dateStarted":"2019-09-17T20:02:07+0000","dateFinished":"2019-09-17T20:02:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1288"},{"text":"%md\n\nThe scala code above will take the desired settings above and will query accordingly. Then we will bind the results to angular in order to display the results on the map. \n\n<span style=\"color:red\">The map is intended to update automatically, in case it doesnt, execute the code</span>\n","user":"anonymous","dateUpdated":"2019-09-17T20:03:36+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":"true"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>The scala code above will take the desired settings above and will query accordingly. Then we will bind the results to angular in order to display the results on the map. </p>\n<span style=\"color:red\">The map is intended to update automatically, in case it doesnt, execute the code</span>\n</div>"}]},"apps":[],"jobName":"paragraph_1568750059247_1304203494","id":"20190909-122440_1005023650","dateCreated":"2019-09-17T19:54:19+0000","dateStarted":"2019-09-17T20:03:36+0000","dateFinished":"2019-09-17T20:03:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1289"},{"text":"%angular\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.3/leaflet.css\" />\n<div id=\"map\" style=\"height: 600px; width: 100%\"></div>\n\n<script type=\"text/javascript\">\n\n//based on https://gist.github.com/granturing/a09aed4a302a7367be92, https://community.hortonworks.com/articles/90320/add-leaflet-map-to-zeppelin-notebook.html, etc\n\nfunction initMap() {\n    //open up a map around NYC at zoom level 13\n    var map = L.map('map', {preferCanvas: true}).setView([40.75, -73.99], 13);\n\n    //define the background tile layer using OpenStreet maps.  Leaflet can work with other providers, too\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n        maxZoom: 16,\n        minZoom: 11\n    }).addTo(map);\n\n    //define a new LayerGroup which will hold our markers\n    var startMarkers = L.layerGroup().addTo(map);\n    var endMarkers = L.layerGroup().addTo(map);\n\n    var overlayMaps = {\n    \"Top Pickup Stations\": startMarkers,\n    \"Top Dropoff Stations\": endMarkers\n    };\n    \n    //add a Control to the map to let the user click the Marker layer off and on\n    L.control.layers(null, overlayMaps).addTo(map);\n    \n    // keep track of our markers, so we can remove them later\n    var markers = new Array();\n    \n    // setup a custom icon for markers. See https://github.com/pointhi/leaflet-color-markers\n    var greenIcon = new L.Icon({\n      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n      iconSize: [12, 20],\n      iconAnchor: [6, 20],\n      popupAnchor: [1, -17],\n      shadowSize: [20, 20]\n    });\n    \n    var redIcon = new L.Icon({\n      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n      iconSize: [12, 20],\n      iconAnchor: [6, 20],\n      popupAnchor: [1, -17],\n      shadowSize: [20, 20]\n    });\n\n    var el = angular.element($('#map').parent('.ng-scope'));\n    angular.element(el).ready(function() {\n        \n        //listen for changes to the angular variable called stations\n        window.locationWatcher = el.scope().compiledScope.$watch('xyzasdf_stations', function(newValue, oldValue) {\n             //startMarkers.clearLayers(); -- this did not work for me, so I use the for loop below to delete old markers\n            for(i=0;i<markers.length;i++) {\n               startMarkers.removeLayer(markers[i]);\n               endMarkers.removeLayer(markers[i]);\n               map.removeLayer(markers[i]);\n            }  \n            //now empty our array and start again\n            markers = new Array();\n            \n            //loop through each entry in our stations variable and add it as a marker\n            angular.forEach(newValue, function(bikes) {\n                var marker = L.marker([bikes.lat, bikes.lon], {icon: greenIcon})\n                    .bindPopup(\"<b>\" + bikes.station + \"</b><br>\" + bikes.trips)\n                var circle = L.circle([bikes.lat, bikes.lon], bikes.radius,{\n                       color: 'green',\n                       fillColor: '#5f0',\n                       fillOpacity: 0.5 })\n                   \n                if (bikes.ridetype==\"End\") {\n                    marker.setIcon(redIcon)\n                    marker.addTo(endMarkers)\n                    circle.setStyle({\n                       color: 'red',\n                       fillColor: '#f03',\n                       fillOpacity: 0.5 })\n                    circle.addTo(endMarkers)\n                } else {\n                    marker.addTo(startMarkers);  \n                    circle.addTo(startMarkers);  \n                }\n                markers.push(circle);   \n                markers.push(marker);   \n\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we'll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log('Loading Leaflet library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.3/leaflet.js';\n    sc.onload = initMap;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>\n","dateUpdated":"2019-09-17T20:01:44+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":"true"},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.3/leaflet.css\" />\n<div id=\"map\" style=\"height: 600px; width: 100%\"></div>\n\n<script type=\"text/javascript\">\n\n//based on https://gist.github.com/granturing/a09aed4a302a7367be92, https://community.hortonworks.com/articles/90320/add-leaflet-map-to-zeppelin-notebook.html, etc\n\nfunction initMap() {\n    //open up a map around NYC at zoom level 13\n    var map = L.map('map', {preferCanvas: true}).setView([40.75, -73.99], 13);\n\n    //define the background tile layer using OpenStreet maps.  Leaflet can work with other providers, too\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n        maxZoom: 16,\n        minZoom: 11\n    }).addTo(map);\n\n    //define a new LayerGroup which will hold our markers\n    var startMarkers = L.layerGroup().addTo(map);\n    var endMarkers = L.layerGroup().addTo(map);\n\n    var overlayMaps = {\n    \"Top Pickup Stations\": startMarkers,\n    \"Top Dropoff Stations\": endMarkers\n    };\n    \n    //add a Control to the map to let the user click the Marker layer off and on\n    L.control.layers(null, overlayMaps).addTo(map);\n    \n    // keep track of our markers, so we can remove them later\n    var markers = new Array();\n    \n    // setup a custom icon for markers. See https://github.com/pointhi/leaflet-color-markers\n    var greenIcon = new L.Icon({\n      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n      iconSize: [12, 20],\n      iconAnchor: [6, 20],\n      popupAnchor: [1, -17],\n      shadowSize: [20, 20]\n    });\n    \n    var redIcon = new L.Icon({\n      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n      iconSize: [12, 20],\n      iconAnchor: [6, 20],\n      popupAnchor: [1, -17],\n      shadowSize: [20, 20]\n    });\n\n    var el = angular.element($('#map').parent('.ng-scope'));\n    angular.element(el).ready(function() {\n        \n        //listen for changes to the angular variable called stations\n        window.locationWatcher = el.scope().compiledScope.$watch('xyzasdf_stations', function(newValue, oldValue) {\n             //startMarkers.clearLayers(); -- this did not work for me, so I use the for loop below to delete old markers\n            for(i=0;i<markers.length;i++) {\n               startMarkers.removeLayer(markers[i]);\n               endMarkers.removeLayer(markers[i]);\n               map.removeLayer(markers[i]);\n            }  \n            //now empty our array and start again\n            markers = new Array();\n            \n            //loop through each entry in our stations variable and add it as a marker\n            angular.forEach(newValue, function(bikes) {\n                var marker = L.marker([bikes.lat, bikes.lon], {icon: greenIcon})\n                    .bindPopup(\"<b>\" + bikes.station + \"</b><br>\" + bikes.trips)\n                var circle = L.circle([bikes.lat, bikes.lon], bikes.radius,{\n                       color: 'green',\n                       fillColor: '#5f0',\n                       fillOpacity: 0.5 })\n                   \n                if (bikes.ridetype==\"End\") {\n                    marker.setIcon(redIcon)\n                    marker.addTo(endMarkers)\n                    circle.setStyle({\n                       color: 'red',\n                       fillColor: '#f03',\n                       fillOpacity: 0.5 })\n                    circle.addTo(endMarkers)\n                } else {\n                    marker.addTo(startMarkers);  \n                    circle.addTo(startMarkers);  \n                }\n                markers.push(circle);   \n                markers.push(marker);   \n\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we'll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log('Loading Leaflet library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.3/leaflet.js';\n    sc.onload = initMap;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>"}]},"apps":[],"jobName":"paragraph_1568750059247_1304203494","id":"20190826-134609_2097075969","dateCreated":"2019-09-17T19:54:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1290","user":"anonymous","dateFinished":"2019-09-17T20:01:44+0000","dateStarted":"2019-09-17T20:01:44+0000"},{"text":"%md\n\n<span style=\"color:red\">Congratulations, you have completed this segement. You have learned how to create interactive maps in the Big Data Cloud. This will help greatly in the analytics or feature engineering process to fuel your insights.</span>\n","dateUpdated":"2019-09-17T20:04:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/text","results":{},"enabled":true,"editorSetting":{"language":"text","editOnDblClick":false},"editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1568750059247_1304203494","id":"20190826-134648_223391488","dateCreated":"2019-09-17T19:54:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1291","user":"anonymous","dateFinished":"2019-09-17T20:04:51+0000","dateStarted":"2019-09-17T20:04:51+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<span style=\"color:red\">Congratulations, you have completed this segement. You have learned how to create interactive maps in the Big Data Cloud. This will help greatly in the analytics or feature engineering process to fuel your insights.</span>\n</div>"}]}},{"text":"%md\n","user":"anonymous","dateUpdated":"2019-09-17T20:04:51+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1568750691446_673732508","id":"20190917-200451_68424558","dateCreated":"2019-09-17T20:04:51+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2434"}],"name":"/demouser01/03_Map","id":"2EMSDMUMG","angularObjects":{"2ENBRW4H8:shared_process":[],"2EQME9B4G:shared_process":[],"2ENCTH98M:shared_process":[],"2EN5EC92A:shared_process":[],"2EN2VB844:shared_process":[],"2C4U48MY3_spark2:shared_process":[{"name":"BIND_topN","object":"5","noteId":"2EMSDMUMG"},{"name":"BIND_dayOfWeek","object":"MonFri","noteId":"2EMSDMUMG"},{"name":"BIND_hourOfDay","object":"Morning","noteId":"2EMSDMUMG"},{"name":"xyzasdf_stations","object":[{"ridetype":"Start","station":"Pershing Square North","trips":"Pickups:2934","lat":40.751873,"lon":-73.977706,"radius":366.75},{"ridetype":"Start","station":"Penn Station Valet","trips":"Pickups:2021","lat":40.751283596962296,"lon":-73.99692445993422,"radius":252.625},{"ridetype":"Start","station":"W 42 St & Dyer Ave","trips":"Pickups:1665","lat":40.75898481399634,"lon":-73.99379968643188,"radius":208.125},{"ridetype":"Start","station":"E 14 St & Avenue B","trips":"Pickups:1400","lat":40.72938685,"lon":-73.97772429,"radius":175},{"ridetype":"Start","station":"W 31 St & 7 Ave","trips":"Pickups:1388","lat":40.749156,"lon":-73.9916,"radius":173.5},{"ridetype":"End","station":"W 52 St & 5 Ave","trips":"Dropoffs:3332","lat":40.76002262,"lon":-73.97638515999999,"radius":416.5},{"ridetype":"End","station":"Broadway & E 22 St","trips":"Dropoffs:3111","lat":40.7404432,"lon":-73.98945109,"radius":388.875},{"ridetype":"End","station":"Pershing Square North","trips":"Dropoffs:2779","lat":40.75197300000001,"lon":-73.977606,"radius":347.375},{"ridetype":"End","station":"E 47 St & Park Ave","trips":"Dropoffs:1857","lat":40.75520267,"lon":-73.97488695999999,"radius":232.125},{"ridetype":"End","station":"1 Ave & E 68 St","trips":"Dropoffs:1475","lat":40.765105250000005,"lon":-73.95808491,"radius":184.375}],"noteId":"2EMSDMUMG"},{"name":"xyzasdf_topstations","object":[{"ridetype":"Start","station":"Pershing Square North","trips":"Pickups:9642","lat":40.751873,"lon":-73.977706},{"ridetype":"Start","station":"W 21 St & 6 Ave","trips":"Pickups:5990","lat":40.74173969,"lon":-73.99415556},{"ridetype":"Start","station":"E 17 St & Broadway","trips":"Pickups:5802","lat":40.73704984,"lon":-73.99009296},{"ridetype":"Start","station":"Broadway & E 22 St","trips":"Pickups:5420","lat":40.7403432,"lon":-73.98955109},{"ridetype":"Start","station":"Broadway & E 14 St","trips":"Pickups:5342","lat":40.73454567,"lon":-73.99074142},{"ridetype":"Start","station":"8 Ave & W 33 St","trips":"Pickups:5282","lat":40.751551,"lon":-73.993934},{"ridetype":"Start","station":"W 41 St & 8 Ave","trips":"Pickups:4963","lat":40.75640548,"lon":-73.9900262},{"ridetype":"Start","station":"W 52 St & 5 Ave","trips":"Pickups:4822","lat":40.75992262,"lon":-73.97648516},{"ridetype":"Start","station":"Cooper Square & E 7 St","trips":"Pickups:4644","lat":40.72923649910006,"lon":-73.99086803197861},{"ridetype":"Start","station":"8 Ave & W 31 St","trips":"Pickups:4622","lat":40.7505853470215,"lon":-73.9946848154068}],"noteId":"2EMSDMUMG"}],"2ENT96YQU:shared_process":[],"2EQX7J6HN:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}